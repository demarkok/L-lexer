/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

import tokens.*;
import tokens.keywords.*;
import tokens.operators.*;

import static tokens.operators.OperatorType.*;
import static tokens.keywords.KeywordType.*;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>l.flex</tt>
 */
class LLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\4\1\0\1\5\1\3\22\0\1\5\1\33\3\0\1\31\1\36\1\0\1\40\1\41\1\30\1"+
    "\27\1\0\1\13\1\20\1\6\1\15\11\1\1\0\1\42\1\35\1\32\1\34\2\0\3\2\1\14\1\11"+
    "\1\14\5\2\1\16\16\2\4\0\1\10\1\0\1\25\1\50\1\2\1\47\1\12\1\24\1\51\1\44\1"+
    "\43\2\2\1\17\1\2\1\45\1\7\2\2\1\22\1\26\1\21\1\23\1\2\1\46\3\2\1\0\1\37\203"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\3\1\6"+
    "\1\2\1\1\3\3\1\7\1\10\1\11\2\1\1\12"+
    "\1\13\2\1\1\14\1\15\1\16\4\3\2\0\1\17"+
    "\1\2\1\17\1\20\2\3\2\0\1\17\4\3\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\3\1\30"+
    "\1\3\1\17\1\0\1\3\1\31\1\0\7\3\1\0"+
    "\1\32\1\33\1\34\1\35\3\3\1\36\1\37\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\52\0\322\0\374"+
    "\0\52\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\52\0\52"+
    "\0\52\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\52"+
    "\0\52\0\52\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\52\0\52\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2"+
    "\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\52\0\52\0\52"+
    "\0\52\0\52\0\52\0\176\0\u05be\0\u05e8\0\176\0\u0612"+
    "\0\u063c\0\u0666\0\u0690\0\176\0\u06ba\0\u06e4\0\u070e\0\u0738"+
    "\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\176\0\176\0\176"+
    "\0\176\0\u0834\0\u085e\0\u0888\0\176\0\176\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\3\4\1\10"+
    "\1\11\1\4\1\12\2\4\1\13\1\14\1\15\1\4"+
    "\1\16\2\4\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\2\4"+
    "\1\34\1\35\1\36\1\4\53\0\1\3\6\0\1\37"+
    "\2\40\1\0\1\41\1\3\2\42\1\43\3\0\1\41"+
    "\22\0\1\41\3\0\2\4\4\0\4\4\1\0\4\4"+
    "\1\0\6\4\14\0\7\4\4\0\1\6\53\0\1\44"+
    "\44\0\2\4\4\0\4\4\1\0\3\4\1\45\1\0"+
    "\6\4\14\0\2\4\1\46\4\4\1\0\1\47\6\0"+
    "\1\50\2\40\1\0\1\41\1\47\2\42\1\43\3\0"+
    "\1\41\22\0\1\41\3\0\1\51\13\0\1\51\35\0"+
    "\2\4\4\0\4\4\1\0\4\4\1\0\1\4\1\52"+
    "\4\4\14\0\1\4\1\53\5\4\1\0\2\4\4\0"+
    "\3\4\1\54\1\0\4\4\1\0\6\4\14\0\7\4"+
    "\1\0\2\4\4\0\4\4\1\0\4\4\1\0\4\4"+
    "\1\55\1\4\14\0\7\4\32\0\1\56\51\0\1\57"+
    "\51\0\1\60\51\0\1\61\55\0\1\62\52\0\1\63"+
    "\13\0\2\4\4\0\4\4\1\0\4\4\1\0\3\4"+
    "\1\64\2\4\14\0\7\4\1\0\2\4\4\0\4\4"+
    "\1\0\4\4\1\0\1\4\1\65\4\4\14\0\1\4"+
    "\1\66\5\4\1\0\2\4\4\0\1\67\3\4\1\0"+
    "\4\4\1\0\6\4\14\0\7\4\1\0\2\4\4\0"+
    "\3\4\1\70\1\0\4\4\1\0\6\4\14\0\7\4"+
    "\1\0\1\3\6\0\1\37\4\0\1\3\35\0\1\71"+
    "\11\0\1\72\1\0\1\71\11\0\1\72\23\0\1\51"+
    "\7\0\2\40\1\0\1\41\1\51\6\0\1\41\22\0"+
    "\1\41\2\0\7\44\1\0\2\44\1\0\4\44\1\0"+
    "\32\44\1\0\2\4\4\0\4\4\1\0\4\4\1\0"+
    "\5\4\1\73\14\0\7\4\1\0\2\4\4\0\4\4"+
    "\1\0\4\4\1\0\6\4\14\0\4\4\1\74\2\4"+
    "\1\0\1\47\6\0\1\50\2\40\1\0\1\41\1\47"+
    "\2\0\1\43\3\0\1\41\22\0\1\41\3\0\1\47"+
    "\6\0\1\50\4\0\1\47\35\0\1\51\6\0\1\75"+
    "\2\40\1\0\1\41\1\51\6\0\1\41\22\0\1\41"+
    "\3\0\2\4\4\0\4\4\1\0\4\4\1\0\2\4"+
    "\1\76\3\4\14\0\7\4\1\0\2\4\4\0\3\4"+
    "\1\77\1\0\4\4\1\0\6\4\14\0\7\4\1\0"+
    "\2\4\4\0\4\4\1\0\4\4\1\0\4\4\1\100"+
    "\1\4\14\0\7\4\1\0\2\4\4\0\4\4\1\0"+
    "\3\4\1\101\1\0\6\4\14\0\7\4\1\0\2\4"+
    "\4\0\4\4\1\0\4\4\1\0\6\4\14\0\1\102"+
    "\6\4\1\0\2\4\4\0\4\4\1\0\4\4\1\0"+
    "\6\4\14\0\1\103\6\4\1\0\2\4\4\0\4\4"+
    "\1\0\4\4\1\0\6\4\14\0\6\4\1\104\1\0"+
    "\1\71\6\0\1\105\3\0\1\41\1\71\6\0\1\41"+
    "\22\0\1\41\3\0\1\71\13\0\1\71\35\0\2\4"+
    "\4\0\3\4\1\106\1\0\4\4\1\0\6\4\14\0"+
    "\7\4\1\0\1\51\6\0\1\75\4\0\1\51\35\0"+
    "\2\4\4\0\3\4\1\107\1\0\4\4\1\0\6\4"+
    "\14\0\7\4\1\0\2\4\4\0\4\4\1\0\4\4"+
    "\1\0\6\4\14\0\2\4\1\110\4\4\1\0\2\4"+
    "\4\0\4\4\1\0\4\4\1\0\6\4\14\0\4\4"+
    "\1\111\2\4\1\0\2\4\4\0\4\4\1\0\4\4"+
    "\1\0\5\4\1\76\14\0\7\4\1\0\2\4\4\0"+
    "\4\4\1\0\4\4\1\0\1\112\5\4\14\0\7\4"+
    "\1\0\2\4\4\0\4\4\1\0\3\4\1\113\1\0"+
    "\6\4\14\0\7\4\1\0\2\4\4\0\4\4\1\0"+
    "\4\4\1\0\6\4\14\0\1\114\6\4\1\0\1\71"+
    "\6\0\1\105\4\0\1\71\35\0\2\4\4\0\3\4"+
    "\1\115\1\0\4\4\1\0\6\4\14\0\7\4\1\0"+
    "\2\4\4\0\3\4\1\116\1\0\4\4\1\0\6\4"+
    "\14\0\7\4\1\0\2\4\4\0\4\4\1\0\4\4"+
    "\1\0\6\4\14\0\2\4\1\117\4\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2226];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\5\1\3\11"+
    "\6\1\3\11\4\1\2\0\2\11\4\1\2\0\5\1"+
    "\6\11\6\1\1\0\2\1\1\0\7\1\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private int yyline = 0;
    private int yycolumn = 0;

    private String text() {
        return yytext().toString();
    }

    private Operator newOperator(OperatorType operator) {
        return new Operator(operator, yyline, yycolumn, yycolumn + text().length());
    }

    private Keyword newKeyword(KeywordType keyword) {
        return new Keyword(keyword, yyline, yycolumn, yycolumn + text().length());
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new ParsingErrorException();
            }
          case 33: break;
          case 2: 
            { return new NumInt(text(), yyline, yycolumn, yycolumn + text().length());
            }
          case 34: break;
          case 3: 
            { return new Ident(text(), yyline, yycolumn, yycolumn + text().length());
            }
          case 35: break;
          case 4: 
            { 
            }
          case 36: break;
          case 5: 
            { return newOperator(DIV);
            }
          case 37: break;
          case 6: 
            { return newOperator(MINUS);
            }
          case 38: break;
          case 7: 
            { return newOperator(PLUS);
            }
          case 39: break;
          case 8: 
            { return newOperator(MUL);
            }
          case 40: break;
          case 9: 
            { return newOperator(MOD);
            }
          case 41: break;
          case 10: 
            { return newOperator(G);
            }
          case 42: break;
          case 11: 
            { return newOperator(L);
            }
          case 43: break;
          case 12: 
            { return new OpeningPar(yyline, yycolumn, yycolumn + text().length());
            }
          case 44: break;
          case 13: 
            { return new ClosingPar(yyline, yycolumn, yycolumn + text().length());
            }
          case 45: break;
          case 14: 
            { return new Semicolon(yyline, yycolumn, yycolumn + text().length());
            }
          case 46: break;
          case 15: 
            { return new NumDouble(text(), yyline, yycolumn, yycolumn + text().length());
            }
          case 47: break;
          case 16: 
            { return new Comment(text(), yyline, yycolumn, yycolumn + text().length());
            }
          case 48: break;
          case 17: 
            { return newOperator(EQ);
            }
          case 49: break;
          case 18: 
            { return newOperator(NEQ);
            }
          case 50: break;
          case 19: 
            { return newOperator(GEQ);
            }
          case 51: break;
          case 20: 
            { return newOperator(LEQ);
            }
          case 52: break;
          case 21: 
            { return newOperator(AND);
            }
          case 53: break;
          case 22: 
            { return newOperator(OR);
            }
          case 54: break;
          case 23: 
            { return newKeyword(IF);
            }
          case 55: break;
          case 24: 
            { return newKeyword(DO);
            }
          case 56: break;
          case 25: 
            { return newKeyword(END);
            }
          case 57: break;
          case 26: 
            { return newKeyword(ELSE);
            }
          case 58: break;
          case 27: 
            { return new Bool(text(), yyline, yycolumn, yycolumn + text().length());
            }
          case 59: break;
          case 28: 
            { return newKeyword(THEN);
            }
          case 60: break;
          case 29: 
            { return newKeyword(READ);
            }
          case 61: break;
          case 30: 
            { return newKeyword(WRITE);
            }
          case 62: break;
          case 31: 
            { return newKeyword(WHILE);
            }
          case 63: break;
          case 32: 
            { return newKeyword(BEGIN);
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
